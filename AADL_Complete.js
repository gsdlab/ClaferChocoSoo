scope({c0_AADLMember:113, c0_CC_M:2, c0_C_D_S:2, c0_C_T_S:2, c0_C_V:2, c0_Car:1, c0_Controller:1, c0_DataType:3, c0_FET_Connection:40, c0_FET_DataPort:40, c0_FET_Flow:40, c0_FlowElement:40, c0_FlowType:4, c0_Pdirection:51, c0_PortDirection:2, c0_Property:2, c0_Unit:4, c0_ValueUnit:9, c0_compute_desired_speed_flow:5, c0_default_cc_connections:2, c0_default_cc_features:3, c0_default_cc_subcomponents:2, c0_default_cds_features:5, c0_default_cds_flows:5, c0_end:17, c0_flowElements:13, c0_flowType:13, c0_interface:11, c0_member:40, c0_properties:3, c0_start:17, c0_system_latency:11, c0_total_latency:1, c0_type:40, c0_typecasted_CC_M_interface:2, c0_typecasted_C_D_S_acc_interface:1, c0_typecasted_C_D_S_interface:2, c0_typecasted_C_T_S_interface:2, c0_typecasted_C_V_interface:2, c0_typecasted_acc_interface:1, c0_typecasted_interface:2, c0_unit:9, c0_value:9});
defaultScope(1);
intRange(-8, 7);

c0_AADLMember = Abstract("c0_AADLMember");
c0_PropertySet = Abstract("c0_PropertySet");
c0_Property = Abstract("c0_Property");
c0_DataType = Abstract("c0_DataType");
c0_Unit = Abstract("c0_Unit");
c0_ValueUnit = Abstract("c0_ValueUnit");
c0_PortDirection = Abstract("c0_PortDirection");
c0_FlowType = Abstract("c0_FlowType");
c0_FlowElement = Abstract("c0_FlowElement");
c0_Car = Abstract("c0_Car");
c0_Component = Abstract("c0_Component").extending(c0_AADLMember);
c0_ComponentImpl = Abstract("c0_ComponentImpl").extending(c0_AADLMember);
c0_Feature = Abstract("c0_Feature").extending(c0_AADLMember);
c0_Connection = Abstract("c0_Connection").extending(c0_AADLMember);
c0_Flow = Abstract("c0_Flow").extending(c0_AADLMember);
c0_bool_type = Abstract("c0_bool_type").extending(c0_DataType);
c0_float_type = Abstract("c0_float_type").extending(c0_DataType);
c0_Device = Abstract("c0_Device").extending(c0_Component);
c0_System = Abstract("c0_System").extending(c0_Component);
c0_SystemImpl = Abstract("c0_SystemImpl").extending(c0_ComponentImpl);
c0_Port = Abstract("c0_Port").extending(c0_Feature);
c0_DataPort = Abstract("c0_DataPort").extending(c0_Port);
c0_EventPort = Abstract("c0_EventPort").extending(c0_Port);
c0_cruise_control_button = Abstract("c0_cruise_control_button").extending(c0_Device);
c0_wheel_rotation_sensor = Abstract("c0_wheel_rotation_sensor").extending(c0_Device);
c0_radar_sensor = Abstract("c0_radar_sensor").extending(c0_Device);
c0_lidar_sensor = Abstract("c0_lidar_sensor").extending(c0_Device);
c0_throttle_actuator = Abstract("c0_throttle_actuator").extending(c0_Device);
c0_brake_pedal = Abstract("c0_brake_pedal").extending(c0_Device);
c0_engine = Abstract("c0_engine").extending(c0_Device);
c0_compute_velocity = Abstract("c0_compute_velocity").extending(c0_System);
c0_compute_velocity_impl = Abstract("c0_compute_velocity_impl").extending(c0_SystemImpl);
c0_compute_throttle_setting = Abstract("c0_compute_throttle_setting").extending(c0_System);
c0_compute_throttle_setting_impl = Abstract("c0_compute_throttle_setting_impl").extending(c0_SystemImpl);
c0_compute_desired_speed = Abstract("c0_compute_desired_speed").extending(c0_System);
c0_compute_desired_speed_impl = Abstract("c0_compute_desired_speed_impl").extending(c0_SystemImpl);
c0_ccmain = Abstract("c0_ccmain").extending(c0_System);
c0_ccmain_impl = Abstract("c0_ccmain_impl").extending(c0_SystemImpl);
c0_cruise_control = Abstract("c0_cruise_control").extending(c0_System);
c0_cruise_control_impl = Abstract("c0_cruise_control_impl").extending(c0_SystemImpl);
c0_EventDataPort = Abstract("c0_EventDataPort").extending(c0_EventPort);
c0_compute_desired_speed_acc = Abstract("c0_compute_desired_speed_acc").extending(c0_compute_desired_speed);
c0_compute_desired_speed_acc_impl = Abstract("c0_compute_desired_speed_acc_impl").extending(c0_compute_desired_speed_impl);
c0_adaptive_cruise_control = Abstract("c0_adaptive_cruise_control").extending(c0_cruise_control);
c0_adaptive_cruise_control_impl = Abstract("c0_adaptive_cruise_control_impl").extending(c0_cruise_control_impl);
c0_IMPLEMENTATION_CC = Abstract("c0_IMPLEMENTATION_CC").extending(c0_cruise_control_impl);
c0_IMPLEMENTATION_ACC = Abstract("c0_IMPLEMENTATION_ACC").extending(c0_adaptive_cruise_control_impl);
c0_Cflows = c0_Component.addChild("c0_Cflows");
c0_Cfeatures = c0_Component.addChild("c0_Cfeatures");
c0_Cproperties = c0_Component.addChild("c0_Cproperties");
c0_Iflows = c0_ComponentImpl.addChild("c0_Iflows");
c0_Ifeatures = c0_ComponentImpl.addChild("c0_Ifeatures");
c0_Iproperties = c0_ComponentImpl.addChild("c0_Iproperties");
c0_interface = c0_ComponentImpl.addChild("c0_interface").withCard(1, 1);
c0_Iconnections = c0_SystemImpl.addChild("c0_Iconnections");
c0_Isubcomponents = c0_SystemImpl.addChild("c0_Isubcomponents");
c0_system_latency = c0_SystemImpl.addChild("c0_system_latency").withCard(1, 1);
c0_PropSetProperties = c0_PropertySet.addChild("c0_PropSetProperties").extending(c0_Property);
c0_PropType = c0_Property.addChild("c0_PropType").withCard(0, 1).extending(c0_DataType);
c0_properties = c0_DataType.addChild("c0_properties").withCard(1, 1);
c0_Bits = Clafer("c0_Bits").withCard(1, 1).extending(c0_Unit);
c0_V = Clafer("c0_V").withCard(1, 1).extending(c0_Unit);
c0_mV = Clafer("c0_mV").withCard(1, 1).extending(c0_Unit);
c0_Ms = Clafer("c0_Ms").withCard(1, 1).extending(c0_Unit);
c0_value = c0_ValueUnit.addChild("c0_value").withCard(1, 1);
c0_unit = c0_ValueUnit.addChild("c0_unit").withCard(1, 1);
c0_Fproperties = c0_Feature.addChild("c0_Fproperties");
c0_In = Clafer("c0_In").withCard(1, 1).extending(c0_PortDirection);
c0_Out = Clafer("c0_Out").withCard(1, 1).extending(c0_PortDirection);
c0_Pdirection = c0_Port.addChild("c0_Pdirection").withCard(1, 1);
c0_Ptype = c0_DataPort.addChild("c0_Ptype").withCard(0, 1);
c0_Path = Clafer("c0_Path").withCard(1, 1).extending(c0_FlowType);
c0_Source = Clafer("c0_Source").withCard(1, 1).extending(c0_FlowType);
c0_Sink = Clafer("c0_Sink").withCard(1, 1).extending(c0_FlowType);
c0_EndToEnd = Clafer("c0_EndToEnd").withCard(1, 1).extending(c0_FlowType);
c0_start = c0_Connection.addChild("c0_start").withCard(1, 1);
c0_end = c0_Connection.addChild("c0_end").withCard(1, 1);
c0_flowType = c0_Flow.addChild("c0_flowType").withCard(1, 1);
c0_flowElements = c0_Flow.addChild("c0_flowElements").withCard(1);
c0_latency = c0_Flow.addChild("c0_latency").withCard(0, 1);
c0_member = c0_FlowElement.addChild("c0_member").withCard(1, 1);
c0_type = c0_FlowElement.addChild("c0_type").withCard(1, 1).withGroupCard(1, 1);
c0_FET_Connection = c0_type.addChild("c0_FET_Connection").withCard(0, 1);
c0_FET_Flow = c0_type.addChild("c0_FET_Flow").withCard(0, 1);
c0_FET_DataPort = c0_type.addChild("c0_FET_DataPort").withCard(0, 1);
c0_Source_Data_Size_Bool = c0_bool_type.addChild("c0_Source_Data_Size_Bool").withCard(1, 1).extending(c0_ValueUnit);
c0_BOOL = Clafer("c0_BOOL").withCard(1, 1).extending(c0_bool_type);
c0_Source_Data_Size_Float = c0_float_type.addChild("c0_Source_Data_Size_Float").withCard(1, 1).extending(c0_ValueUnit);
c0_FLOAT = Clafer("c0_FLOAT").withCard(1, 1).extending(c0_float_type);
c0_cc_system_on_off_cruise_control_button = c0_cruise_control_button.addChild("c0_cc_system_on_off_cruise_control_button").withCard(1, 1).extending(c0_DataPort);
c0_wheel_pulse_wheel_rotation_sensor = c0_wheel_rotation_sensor.addChild("c0_wheel_pulse_wheel_rotation_sensor").withCard(1, 1).extending(c0_DataPort);
c0_lead_distance_radar = c0_radar_sensor.addChild("c0_lead_distance_radar").withCard(1, 1).extending(c0_DataPort);
c0_lead_distance_lidar = c0_lidar_sensor.addChild("c0_lead_distance_lidar").withCard(1, 1).extending(c0_DataPort);
c0_throttle_setting_throttle_actuator = c0_throttle_actuator.addChild("c0_throttle_setting_throttle_actuator").withCard(1, 1).extending(c0_DataPort);
c0_throttle_actuator_flow = c0_throttle_actuator.addChild("c0_throttle_actuator_flow").withCard(1, 1).extending(c0_Flow);
c0_throttle_actuator_flow_fel1 = c0_throttle_actuator_flow.addChild("c0_throttle_actuator_flow_fel1").withCard(1, 1).extending(c0_FlowElement);
c0_throttle_actuator_flow_lat = c0_throttle_actuator_flow.addChild("c0_throttle_actuator_flow_lat").withCard(1, 1).extending(c0_ValueUnit);
c0_brake_status_brake_pedal = c0_brake_pedal.addChild("c0_brake_status_brake_pedal").withCard(1, 1).extending(c0_DataPort);
c0_brake_pedal_flow = c0_brake_pedal.addChild("c0_brake_pedal_flow").withCard(1, 1).extending(c0_Flow);
c0_brake_pedal_flow_fel1 = c0_brake_pedal_flow.addChild("c0_brake_pedal_flow_fel1").withCard(1, 1).extending(c0_FlowElement);
c0_brake_pedal_flow_lat = c0_brake_pedal_flow.addChild("c0_brake_pedal_flow_lat").withCard(1, 1).extending(c0_ValueUnit);
c0_engine_status_engine = c0_engine.addChild("c0_engine_status_engine").withCard(1, 1).extending(c0_DataPort);
c0_wheel_pulse_compute_velocity = c0_compute_velocity.addChild("c0_wheel_pulse_compute_velocity").withCard(1, 1).extending(c0_DataPort);
c0_instantaneous_velocity_compute_velocity = c0_compute_velocity.addChild("c0_instantaneous_velocity_compute_velocity").withCard(1, 1).extending(c0_DataPort);
c0_compute_velocity_flow = c0_compute_velocity.addChild("c0_compute_velocity_flow").withCard(1, 1).extending(c0_Flow);
c0_compute_velocity_flow_fel1 = c0_compute_velocity_flow.addChild("c0_compute_velocity_flow_fel1").withCard(1, 1).extending(c0_FlowElement);
c0_compute_velocity_flow_fel2 = c0_compute_velocity_flow.addChild("c0_compute_velocity_flow_fel2").withCard(1, 1).extending(c0_FlowElement);
c0_default_interface_cv = c0_compute_velocity_impl.addChild("c0_default_interface_cv").withCard(0, 1).extending(c0_compute_velocity);
c0_desired_speed_compute_throttle_setting = c0_compute_throttle_setting.addChild("c0_desired_speed_compute_throttle_setting").withCard(1, 1).extending(c0_DataPort);
c0_throttle_setting_compute_throttle_setting = c0_compute_throttle_setting.addChild("c0_throttle_setting_compute_throttle_setting").withCard(1, 1).extending(c0_DataPort);
c0_compute_throttle_setting_flow = c0_compute_throttle_setting.addChild("c0_compute_throttle_setting_flow").withCard(1, 1).extending(c0_Flow);
c0_compute_throttle_setting_flow_fel1 = c0_compute_throttle_setting_flow.addChild("c0_compute_throttle_setting_flow_fel1").withCard(1, 1).extending(c0_FlowElement);
c0_compute_throttle_setting_flow_fel2 = c0_compute_throttle_setting_flow.addChild("c0_compute_throttle_setting_flow_fel2").withCard(1, 1).extending(c0_FlowElement);
c0_compute_throttle_setting_flow_lat = c0_compute_throttle_setting_flow.addChild("c0_compute_throttle_setting_flow_lat").withCard(1, 1).extending(c0_ValueUnit);
c0_default_interface_cts = c0_compute_throttle_setting_impl.addChild("c0_default_interface_cts").withCard(0, 1).extending(c0_compute_throttle_setting);
c0_ok_to_run_compute_desired_speed = c0_compute_desired_speed.addChild("c0_ok_to_run_compute_desired_speed").withCard(1, 1).extending(c0_DataPort);
c0_desired_speed_compute_desired_speed = c0_compute_desired_speed.addChild("c0_desired_speed_compute_desired_speed").withCard(1, 1).extending(c0_DataPort);
c0_instantaneous_velocity_compute_desired_speed = c0_compute_desired_speed.addChild("c0_instantaneous_velocity_compute_desired_speed").withCard(1, 1).extending(c0_DataPort);
c0_cds_features = c0_compute_desired_speed.addChild("c0_cds_features");
c0_default_cds_features = c0_compute_desired_speed.addChild("c0_default_cds_features").withCard(0, 1);
c0_compute_desired_speed_flow = c0_compute_desired_speed.addChild("c0_compute_desired_speed_flow").withCard(1, 1);
c0_default_compute_desired_speed_flow = c0_compute_desired_speed.addChild("c0_default_compute_desired_speed_flow").withCard(0, 1).extending(c0_Flow);
c0_compute_desired_speed_flow_fel1 = c0_default_compute_desired_speed_flow.addChild("c0_compute_desired_speed_flow_fel1").withCard(1, 1).extending(c0_FlowElement);
c0_compute_desired_speed_flow_fel2 = c0_default_compute_desired_speed_flow.addChild("c0_compute_desired_speed_flow_fel2").withCard(1, 1).extending(c0_FlowElement);
c0_compute_desired_speed_flow_lat = c0_default_compute_desired_speed_flow.addChild("c0_compute_desired_speed_flow_lat").withCard(1, 1).extending(c0_ValueUnit);
c0_cds_flows = c0_compute_desired_speed.addChild("c0_cds_flows");
c0_default_cds_flows = c0_compute_desired_speed.addChild("c0_default_cds_flows").withCard(0, 1);
c0_default_interface_cds = c0_compute_desired_speed_impl.addChild("c0_default_interface_cds").withCard(0, 1).extending(c0_compute_desired_speed);
c0_cc_system_on_off_ccmain = c0_ccmain.addChild("c0_cc_system_on_off_ccmain").withCard(1, 1).extending(c0_DataPort);
c0_brake_status_ccmain = c0_ccmain.addChild("c0_brake_status_ccmain").withCard(1, 1).extending(c0_DataPort);
c0_engine_status_ccmain = c0_ccmain.addChild("c0_engine_status_ccmain").withCard(1, 1).extending(c0_DataPort);
c0_ok_to_run_ccmain = c0_ccmain.addChild("c0_ok_to_run_ccmain").withCard(1, 1).extending(c0_DataPort);
c0_ccmain_flow = c0_ccmain.addChild("c0_ccmain_flow").withCard(1, 1).extending(c0_Flow);
c0_ccmain_flow_fel1 = c0_ccmain_flow.addChild("c0_ccmain_flow_fel1").withCard(1, 1).extending(c0_FlowElement);
c0_ccmain_flow_fel2 = c0_ccmain_flow.addChild("c0_ccmain_flow_fel2").withCard(1, 1).extending(c0_FlowElement);
c0_ccmain_flow_lat = c0_ccmain_flow.addChild("c0_ccmain_flow_lat").withCard(1, 1).extending(c0_ValueUnit);
c0_default_interface_ccmain = c0_ccmain_impl.addChild("c0_default_interface_ccmain").withCard(0, 1).extending(c0_ccmain);
c0_cc_system_on_off = c0_cruise_control.addChild("c0_cc_system_on_off").withCard(1, 1).extending(c0_DataPort);
c0_brake_status = c0_cruise_control.addChild("c0_brake_status").withCard(1, 1).extending(c0_DataPort);
c0_engine_status = c0_cruise_control.addChild("c0_engine_status").withCard(1, 1).extending(c0_DataPort);
c0_throttle_setting = c0_cruise_control.addChild("c0_throttle_setting").withCard(1, 1).extending(c0_DataPort);
c0_wheel_pulse = c0_cruise_control.addChild("c0_wheel_pulse").withCard(1, 1).extending(c0_DataPort);
c0_cc_features = c0_cruise_control.addChild("c0_cc_features");
c0_default_cc_features = c0_cruise_control.addChild("c0_default_cc_features").withCard(0, 1);
c0_cruise_control_flow = c0_cruise_control.addChild("c0_cruise_control_flow").withCard(1, 1).extending(c0_Flow);
c0_cruise_control_flow_fel1 = c0_cruise_control_flow.addChild("c0_cruise_control_flow_fel1").withCard(1, 1).extending(c0_FlowElement);
c0_cruise_control_flow_fel2 = c0_cruise_control_flow.addChild("c0_cruise_control_flow_fel2").withCard(1, 1).extending(c0_FlowElement);
c0_default_interface_cc = c0_cruise_control_impl.addChild("c0_default_interface_cc").withCard(0, 1).extending(c0_cruise_control);
c0_CC_M = c0_cruise_control_impl.addChild("c0_CC_M").withCard(1, 1);
c0_C_V = c0_cruise_control_impl.addChild("c0_C_V").withCard(1, 1);
c0_C_D_S = c0_cruise_control_impl.addChild("c0_C_D_S").withCard(1, 1);
c0_C_T_S = c0_cruise_control_impl.addChild("c0_C_T_S").withCard(1, 1);
c0_default_CC_M = c0_cruise_control_impl.addChild("c0_default_CC_M").withCard(0, 1).extending(c0_ccmain_impl);
c0_default_CC_M_Int = c0_default_CC_M.addChild("c0_default_CC_M_Int").withCard(1, 1).extending(c0_ccmain);
c0_default_C_V = c0_cruise_control_impl.addChild("c0_default_C_V").withCard(0, 1).extending(c0_compute_velocity_impl);
c0_default_C_V_Int = c0_default_C_V.addChild("c0_default_C_V_Int").withCard(1, 1).extending(c0_compute_velocity);
c0_default_C_D_S = c0_cruise_control_impl.addChild("c0_default_C_D_S").withCard(0, 1).extending(c0_compute_desired_speed_impl);
c0_default_C_T_S = c0_cruise_control_impl.addChild("c0_default_C_T_S").withCard(0, 1).extending(c0_compute_throttle_setting_impl);
c0_default_C_T_S_Int = c0_default_C_T_S.addChild("c0_default_C_T_S_Int").withCard(1, 1).extending(c0_compute_throttle_setting);
c0_ccsubcomponents = c0_cruise_control_impl.addChild("c0_ccsubcomponents");
c0_default_cc_subcomponents = c0_cruise_control_impl.addChild("c0_default_cc_subcomponents").withCard(0, 1);
c0_typecasted_interface = c0_cruise_control_impl.addChild("c0_typecasted_interface").withCard(1, 1);
c0_typecasted_CC_M_interface = c0_cruise_control_impl.addChild("c0_typecasted_CC_M_interface").withCard(1, 1);
c0_typecasted_C_V_interface = c0_cruise_control_impl.addChild("c0_typecasted_C_V_interface").withCard(1, 1);
c0_typecasted_C_D_S_interface = c0_cruise_control_impl.addChild("c0_typecasted_C_D_S_interface").withCard(1, 1);
c0_typecasted_C_T_S_interface = c0_cruise_control_impl.addChild("c0_typecasted_C_T_S_interface").withCard(1, 1);
c0_cruise_control_impl_C1 = c0_cruise_control_impl.addChild("c0_cruise_control_impl_C1").withCard(1, 1).extending(c0_Connection);
c0_cruise_control_impl_C2 = c0_cruise_control_impl.addChild("c0_cruise_control_impl_C2").withCard(1, 1).extending(c0_Connection);
c0_cruise_control_impl_C3 = c0_cruise_control_impl.addChild("c0_cruise_control_impl_C3").withCard(1, 1).extending(c0_Connection);
c0_cruise_control_impl_C4 = c0_cruise_control_impl.addChild("c0_cruise_control_impl_C4").withCard(1, 1).extending(c0_Connection);
c0_cruise_control_impl_C5 = c0_cruise_control_impl.addChild("c0_cruise_control_impl_C5").withCard(1, 1).extending(c0_Connection);
c0_cruise_control_impl_C6 = c0_cruise_control_impl.addChild("c0_cruise_control_impl_C6").withCard(1, 1).extending(c0_Connection);
c0_cruise_control_impl_C7 = c0_cruise_control_impl.addChild("c0_cruise_control_impl_C7").withCard(1, 1).extending(c0_Connection);
c0_cruise_control_impl_C8 = c0_cruise_control_impl.addChild("c0_cruise_control_impl_C8").withCard(1, 1).extending(c0_Connection);
c0_cc_connections = c0_cruise_control_impl.addChild("c0_cc_connections");
c0_default_cc_connections = c0_cruise_control_impl.addChild("c0_default_cc_connections").withCard(0, 1);
c0_cruise_control_impl_flow = c0_cruise_control_impl.addChild("c0_cruise_control_impl_flow").withCard(1, 1).extending(c0_Flow);
c0_cruise_control_impl_flow_fel1 = c0_cruise_control_impl_flow.addChild("c0_cruise_control_impl_flow_fel1").withCard(1, 1).extending(c0_FlowElement);
c0_cruise_control_impl_flow_fel2 = c0_cruise_control_impl_flow.addChild("c0_cruise_control_impl_flow_fel2").withCard(1, 1).extending(c0_FlowElement);
c0_cruise_control_impl_flow_fel3 = c0_cruise_control_impl_flow.addChild("c0_cruise_control_impl_flow_fel3").withCard(1, 1).extending(c0_FlowElement);
c0_cruise_control_impl_flow_fel4 = c0_cruise_control_impl_flow.addChild("c0_cruise_control_impl_flow_fel4").withCard(1, 1).extending(c0_FlowElement);
c0_cruise_control_impl_flow_fel5 = c0_cruise_control_impl_flow.addChild("c0_cruise_control_impl_flow_fel5").withCard(1, 1).extending(c0_FlowElement);
c0_cruise_control_impl_flow_fel6 = c0_cruise_control_impl_flow.addChild("c0_cruise_control_impl_flow_fel6").withCard(1, 1).extending(c0_FlowElement);
c0_cruise_control_impl_flow_fel7 = c0_cruise_control_impl_flow.addChild("c0_cruise_control_impl_flow_fel7").withCard(1, 1).extending(c0_FlowElement);
c0_cruise_control_impl_flow_fel8 = c0_cruise_control_impl_flow.addChild("c0_cruise_control_impl_flow_fel8").withCard(1, 1).extending(c0_FlowElement);
c0_cruise_control_impl_flow_fel9 = c0_cruise_control_impl_flow.addChild("c0_cruise_control_impl_flow_fel9").withCard(1, 1).extending(c0_FlowElement);
c0_lead_value_compute_desired_speed_acc = c0_compute_desired_speed_acc.addChild("c0_lead_value_compute_desired_speed_acc").withCard(1, 1).extending(c0_DataPort);
c0_cds_acc_features = c0_compute_desired_speed_acc.addChild("c0_cds_acc_features");
c0_default_compute_desired_speed_flow_acc = c0_compute_desired_speed_acc.addChild("c0_default_compute_desired_speed_flow_acc").withCard(1, 1).extending(c0_Flow);
c0_fel1 = c0_default_compute_desired_speed_flow_acc.addChild("c0_fel1").withCard(1, 1).extending(c0_FlowElement);
c0_fel2 = c0_default_compute_desired_speed_flow_acc.addChild("c0_fel2").withCard(1, 1).extending(c0_FlowElement);
c0_lat = c0_default_compute_desired_speed_flow_acc.addChild("c0_lat").withCard(1, 1).extending(c0_ValueUnit);
c0_default_interface_cds_acc = c0_compute_desired_speed_acc_impl.addChild("c0_default_interface_cds_acc").withCard(0, 1).extending(c0_compute_desired_speed_acc);
c0_lead_value_adaptive_cruise_control = c0_adaptive_cruise_control.addChild("c0_lead_value_adaptive_cruise_control").withCard(1, 1).extending(c0_DataPort);
c0_acc_features = c0_adaptive_cruise_control.addChild("c0_acc_features");
c0_default_interface_acc = c0_adaptive_cruise_control_impl.addChild("c0_default_interface_acc").withCard(0, 1).extending(c0_adaptive_cruise_control);
c0_default_C_D_S_acc = c0_adaptive_cruise_control_impl.addChild("c0_default_C_D_S_acc").withCard(0, 1).extending(c0_compute_desired_speed_acc_impl);
c0_default_C_D_S_acc_Int = c0_default_C_D_S_acc.addChild("c0_default_C_D_S_acc_Int").withCard(1, 1).extending(c0_compute_desired_speed_acc);
c0_typecasted_acc_interface = c0_adaptive_cruise_control_impl.addChild("c0_typecasted_acc_interface").withCard(1, 1);
c0_typecasted_C_D_S_acc_interface = c0_adaptive_cruise_control_impl.addChild("c0_typecasted_C_D_S_acc_interface").withCard(1, 1);
c0_C9 = c0_adaptive_cruise_control_impl.addChild("c0_C9").withCard(1, 1).extending(c0_Connection);
c0_acc_connections = c0_adaptive_cruise_control_impl.addChild("c0_acc_connections");
c0_INTERFACE_CC = Clafer("c0_INTERFACE_CC").withCard(1, 1).extending(c0_cruise_control);
c0_INTERFACE_ACC = Clafer("c0_INTERFACE_ACC").withCard(1, 1).extending(c0_adaptive_cruise_control);
c0_Controller = c0_Car.addChild("c0_Controller").withCard(1, 1).withGroupCard(1, 1);
c0_cc = c0_Controller.addChild("c0_cc").withCard(0, 1).extending(c0_IMPLEMENTATION_CC);
c0_acc = c0_Controller.addChild("c0_acc").withCard(0, 1).extending(c0_IMPLEMENTATION_ACC);
c0_total_latency = c0_Car.addChild("c0_total_latency").withCard(1, 1);
c0_MyCar = Clafer("c0_MyCar").withCard(1, 1).extending(c0_Car);
c0_Cflows.refToUnique(c0_Flow);
c0_Cfeatures.refToUnique(c0_Feature);
c0_Cproperties.refToUnique(c0_Property);
c0_Iflows.refToUnique(c0_Flow);
c0_Ifeatures.refToUnique(c0_Feature);
c0_Iproperties.refToUnique(c0_Property);
c0_interface.refToUnique(c0_Component);
c0_Iconnections.refToUnique(c0_Connection);
c0_Isubcomponents.refToUnique(c0_AADLMember);
c0_system_latency.refTo(Int);
c0_properties.refToUnique(c0_ValueUnit);
c0_value.refTo(Int);
c0_unit.refToUnique(c0_Unit);
c0_Fproperties.refToUnique(c0_Property);
c0_Pdirection.refToUnique(c0_PortDirection);
c0_Ptype.refToUnique(c0_DataType);
c0_start.refToUnique(c0_DataPort);
c0_end.refToUnique(c0_DataPort);
c0_flowType.refToUnique(c0_FlowType);
c0_flowElements.refToUnique(c0_FlowElement);
c0_latency.refToUnique(c0_ValueUnit);
c0_member.refToUnique(c0_AADLMember);
c0_cds_features.refToUnique(c0_Feature);
c0_compute_desired_speed_flow.refToUnique(c0_Flow);
c0_cds_flows.refToUnique(c0_Flow);
c0_cc_features.refToUnique(c0_Feature);
c0_CC_M.refToUnique(c0_ccmain_impl);
c0_C_V.refToUnique(c0_compute_velocity_impl);
c0_C_D_S.refToUnique(c0_compute_desired_speed_impl);
c0_C_T_S.refToUnique(c0_compute_throttle_setting_impl);
c0_ccsubcomponents.refToUnique(c0_AADLMember);
c0_typecasted_interface.refToUnique(c0_cruise_control);
c0_typecasted_CC_M_interface.refToUnique(c0_ccmain);
c0_typecasted_C_V_interface.refToUnique(c0_compute_velocity);
c0_typecasted_C_D_S_interface.refToUnique(c0_compute_desired_speed);
c0_typecasted_C_T_S_interface.refToUnique(c0_compute_throttle_setting);
c0_cc_connections.refToUnique(c0_Connection);
c0_cds_acc_features.refToUnique(c0_Feature);
c0_acc_features.refToUnique(c0_Feature);
c0_typecasted_acc_interface.refToUnique(c0_adaptive_cruise_control);
c0_typecasted_C_D_S_acc_interface.refToUnique(c0_compute_desired_speed_acc);
c0_acc_connections.refToUnique(c0_Connection);
c0_total_latency.refTo(Int);
c0_bool_type.addConstraint(equal(joinRef(join($this(), c0_properties)), join($this(), c0_Source_Data_Size_Bool)));
c0_Source_Data_Size_Bool.addConstraint(equal(joinRef(join($this(), c0_value)), constant(1)));
c0_Source_Data_Size_Bool.addConstraint(equal(joinRef(join($this(), c0_unit)), global(c0_Bits)));
c0_float_type.addConstraint(equal(joinRef(join($this(), c0_properties)), join($this(), c0_Source_Data_Size_Float)));
c0_Source_Data_Size_Float.addConstraint(equal(joinRef(join($this(), c0_value)), constant(2)));
c0_Source_Data_Size_Float.addConstraint(equal(joinRef(join($this(), c0_unit)), global(c0_Bits)));
c0_cruise_control_button.addConstraint(equal(joinRef(join($this(), c0_Cfeatures)), join($this(), c0_cc_system_on_off_cruise_control_button)));
c0_cruise_control_button.addConstraint(none(join($this(), c0_Cflows)));
c0_cruise_control_button.addConstraint(none(join($this(), c0_Cproperties)));
c0_cc_system_on_off_cruise_control_button.addConstraint(none(join($this(), c0_Ptype)));
c0_cc_system_on_off_cruise_control_button.addConstraint(none(join($this(), c0_Fproperties)));
c0_cc_system_on_off_cruise_control_button.addConstraint(equal(joinRef(join($this(), c0_Pdirection)), global(c0_Out)));
c0_wheel_rotation_sensor.addConstraint(equal(joinRef(join($this(), c0_Cfeatures)), join($this(), c0_wheel_pulse_wheel_rotation_sensor)));
c0_wheel_rotation_sensor.addConstraint(none(join($this(), c0_Cflows)));
c0_wheel_rotation_sensor.addConstraint(none(join($this(), c0_Cproperties)));
c0_wheel_pulse_wheel_rotation_sensor.addConstraint(equal(joinRef(join($this(), c0_Pdirection)), global(c0_Out)));
c0_wheel_pulse_wheel_rotation_sensor.addConstraint(none(join($this(), c0_Ptype)));
c0_wheel_pulse_wheel_rotation_sensor.addConstraint(none(join($this(), c0_Fproperties)));
c0_radar_sensor.addConstraint(equal(joinRef(join($this(), c0_Cfeatures)), join($this(), c0_lead_distance_radar)));
c0_radar_sensor.addConstraint(none(join($this(), c0_Cflows)));
c0_radar_sensor.addConstraint(none(join($this(), c0_Cproperties)));
c0_lead_distance_radar.addConstraint(equal(joinRef(join($this(), c0_Pdirection)), global(c0_Out)));
c0_lead_distance_radar.addConstraint(equal(joinRef(join($this(), c0_Ptype)), global(c0_FLOAT)));
c0_lead_distance_radar.addConstraint(none(join($this(), c0_Fproperties)));
c0_lidar_sensor.addConstraint(equal(joinRef(join($this(), c0_Cfeatures)), join($this(), c0_lead_distance_lidar)));
c0_lidar_sensor.addConstraint(none(join($this(), c0_Cflows)));
c0_lidar_sensor.addConstraint(none(join($this(), c0_Cproperties)));
c0_lead_distance_lidar.addConstraint(equal(joinRef(join($this(), c0_Pdirection)), global(c0_Out)));
c0_lead_distance_lidar.addConstraint(equal(joinRef(join($this(), c0_Ptype)), global(c0_FLOAT)));
c0_lead_distance_lidar.addConstraint(none(join($this(), c0_Fproperties)));
c0_throttle_actuator.addConstraint(equal(joinRef(join($this(), c0_Cfeatures)), join($this(), c0_throttle_setting_throttle_actuator)));
c0_throttle_actuator.addConstraint(equal(joinRef(join($this(), c0_Cflows)), join($this(), c0_throttle_actuator_flow)));
c0_throttle_actuator.addConstraint(none(join($this(), c0_Cproperties)));
c0_throttle_setting_throttle_actuator.addConstraint(equal(joinRef(join($this(), c0_Pdirection)), global(c0_In)));
c0_throttle_setting_throttle_actuator.addConstraint(none(join($this(), c0_Ptype)));
c0_throttle_setting_throttle_actuator.addConstraint(none(join($this(), c0_Fproperties)));
c0_throttle_actuator_flow.addConstraint(equal(joinRef(join($this(), c0_flowType)), global(c0_Sink)));
c0_throttle_actuator_flow.addConstraint(equal(joinRef(join($this(), c0_latency)), join($this(), c0_throttle_actuator_flow_lat)));
c0_throttle_actuator_flow.addConstraint(equal(joinRef(join($this(), c0_flowElements)), join($this(), c0_throttle_actuator_flow_fel1)));
c0_throttle_actuator_flow_fel1.addConstraint(some(join(join($this(), c0_type), c0_FET_DataPort)));
c0_throttle_actuator_flow_fel1.addConstraint(equal(joinRef(join($this(), c0_member)), join(joinParent(joinParent($this())), c0_throttle_setting_throttle_actuator)));
c0_throttle_actuator_flow_lat.addConstraint(equal(joinRef(join($this(), c0_value)), constant(1)));
c0_throttle_actuator_flow_lat.addConstraint(equal(joinRef(join($this(), c0_unit)), global(c0_Ms)));
c0_brake_pedal.addConstraint(equal(joinRef(join($this(), c0_Cfeatures)), join($this(), c0_brake_status_brake_pedal)));
c0_brake_pedal.addConstraint(equal(joinRef(join($this(), c0_Cflows)), join($this(), c0_brake_pedal_flow)));
c0_brake_pedal.addConstraint(none(join($this(), c0_Cproperties)));
c0_brake_status_brake_pedal.addConstraint(equal(joinRef(join($this(), c0_Pdirection)), global(c0_Out)));
c0_brake_status_brake_pedal.addConstraint(equal(joinRef(join($this(), c0_Ptype)), global(c0_BOOL)));
c0_brake_status_brake_pedal.addConstraint(none(join($this(), c0_Fproperties)));
c0_brake_pedal_flow.addConstraint(equal(joinRef(join($this(), c0_flowType)), global(c0_Source)));
c0_brake_pedal_flow.addConstraint(equal(joinRef(join($this(), c0_latency)), join($this(), c0_brake_pedal_flow_lat)));
c0_brake_pedal_flow.addConstraint(equal(joinRef(join($this(), c0_flowElements)), join($this(), c0_brake_pedal_flow_fel1)));
c0_brake_pedal_flow_fel1.addConstraint(some(join(join($this(), c0_type), c0_FET_DataPort)));
c0_brake_pedal_flow_fel1.addConstraint(equal(joinRef(join($this(), c0_member)), join(joinParent(joinParent($this())), c0_brake_status_brake_pedal)));
c0_brake_pedal_flow_lat.addConstraint(equal(joinRef(join($this(), c0_value)), constant(1)));
c0_brake_pedal_flow_lat.addConstraint(equal(joinRef(join($this(), c0_unit)), global(c0_Ms)));
c0_engine.addConstraint(none(join($this(), c0_Cflows)));
c0_engine.addConstraint(none(join($this(), c0_Cproperties)));
c0_engine.addConstraint(equal(joinRef(join($this(), c0_Cfeatures)), join($this(), c0_engine_status_engine)));
c0_engine_status_engine.addConstraint(equal(joinRef(join($this(), c0_Pdirection)), global(c0_Out)));
c0_engine_status_engine.addConstraint(none(join($this(), c0_Ptype)));
c0_engine_status_engine.addConstraint(none(join($this(), c0_Fproperties)));
c0_compute_velocity.addConstraint(equal(joinRef(join($this(), c0_Cfeatures)), union(join($this(), c0_wheel_pulse_compute_velocity), join($this(), c0_instantaneous_velocity_compute_velocity))));
c0_compute_velocity.addConstraint(equal(joinRef(join($this(), c0_Cflows)), join($this(), c0_compute_velocity_flow)));
c0_compute_velocity.addConstraint(none(join($this(), c0_Cproperties)));
c0_wheel_pulse_compute_velocity.addConstraint(equal(joinRef(join($this(), c0_Pdirection)), global(c0_In)));
c0_wheel_pulse_compute_velocity.addConstraint(none(join($this(), c0_Ptype)));
c0_wheel_pulse_compute_velocity.addConstraint(none(join($this(), c0_Fproperties)));
c0_instantaneous_velocity_compute_velocity.addConstraint(equal(joinRef(join($this(), c0_Pdirection)), global(c0_Out)));
c0_instantaneous_velocity_compute_velocity.addConstraint(none(join($this(), c0_Ptype)));
c0_instantaneous_velocity_compute_velocity.addConstraint(none(join($this(), c0_Fproperties)));
c0_compute_velocity_flow.addConstraint(equal(joinRef(join($this(), c0_flowType)), global(c0_Path)));
c0_compute_velocity_flow.addConstraint(none(join($this(), c0_latency)));
c0_compute_velocity_flow.addConstraint(equal(joinRef(join($this(), c0_flowElements)), union(join($this(), c0_compute_velocity_flow_fel1), join($this(), c0_compute_velocity_flow_fel2))));
c0_compute_velocity_flow_fel1.addConstraint(some(join(join($this(), c0_type), c0_FET_DataPort)));
c0_compute_velocity_flow_fel1.addConstraint(equal(joinRef(join($this(), c0_member)), join(joinParent(joinParent($this())), c0_wheel_pulse_compute_velocity)));
c0_compute_velocity_flow_fel2.addConstraint(some(join(join($this(), c0_type), c0_FET_DataPort)));
c0_compute_velocity_flow_fel2.addConstraint(equal(joinRef(join($this(), c0_member)), join(joinParent(joinParent($this())), c0_instantaneous_velocity_compute_velocity)));
c0_compute_velocity_impl.addConstraint($in(joinRef(join($this(), c0_interface)), global(c0_compute_velocity)));
c0_compute_velocity_impl.addConstraint(none(join($this(), c0_Iflows)));
c0_compute_velocity_impl.addConstraint(none(join($this(), c0_Ifeatures)));
c0_compute_velocity_impl.addConstraint(none(join($this(), c0_Iproperties)));
c0_compute_velocity_impl.addConstraint(none(join($this(), c0_Iconnections)));
c0_compute_velocity_impl.addConstraint(none(join($this(), c0_Isubcomponents)));
c0_compute_velocity_impl.addConstraint(equal(joinRef(join($this(), c0_system_latency)), constant(0)));
c0_default_interface_cv.addConstraint(equal(joinRef(join(joinParent($this()), c0_interface)), $this()));
c0_compute_throttle_setting.addConstraint(equal(joinRef(join($this(), c0_Cfeatures)), union(join($this(), c0_desired_speed_compute_throttle_setting), join($this(), c0_throttle_setting_compute_throttle_setting))));
c0_compute_throttle_setting.addConstraint(equal(joinRef(join($this(), c0_Cflows)), join($this(), c0_compute_throttle_setting_flow)));
c0_compute_throttle_setting.addConstraint(none(join($this(), c0_Cproperties)));
c0_desired_speed_compute_throttle_setting.addConstraint(equal(joinRef(join($this(), c0_Pdirection)), global(c0_In)));
c0_desired_speed_compute_throttle_setting.addConstraint(none(join($this(), c0_Ptype)));
c0_desired_speed_compute_throttle_setting.addConstraint(none(join($this(), c0_Fproperties)));
c0_throttle_setting_compute_throttle_setting.addConstraint(equal(joinRef(join($this(), c0_Pdirection)), global(c0_Out)));
c0_throttle_setting_compute_throttle_setting.addConstraint(none(join($this(), c0_Ptype)));
c0_throttle_setting_compute_throttle_setting.addConstraint(none(join($this(), c0_Fproperties)));
c0_compute_throttle_setting_flow.addConstraint(equal(joinRef(join($this(), c0_latency)), join($this(), c0_compute_throttle_setting_flow_lat)));
c0_compute_throttle_setting_flow.addConstraint(equal(joinRef(join($this(), c0_flowType)), global(c0_Path)));
c0_compute_throttle_setting_flow.addConstraint(equal(joinRef(join($this(), c0_flowElements)), union(join($this(), c0_compute_throttle_setting_flow_fel1), join($this(), c0_compute_throttle_setting_flow_fel2))));
c0_compute_throttle_setting_flow_fel1.addConstraint(some(join(join($this(), c0_type), c0_FET_DataPort)));
c0_compute_throttle_setting_flow_fel1.addConstraint(equal(joinRef(join($this(), c0_member)), join(joinParent(joinParent($this())), c0_desired_speed_compute_throttle_setting)));
c0_compute_throttle_setting_flow_fel2.addConstraint(some(join(join($this(), c0_type), c0_FET_DataPort)));
c0_compute_throttle_setting_flow_fel2.addConstraint(equal(joinRef(join($this(), c0_member)), join(joinParent(joinParent($this())), c0_throttle_setting_compute_throttle_setting)));
c0_compute_throttle_setting_flow_lat.addConstraint(equal(joinRef(join($this(), c0_value)), constant(2)));
c0_compute_throttle_setting_flow_lat.addConstraint(equal(joinRef(join($this(), c0_unit)), global(c0_Ms)));
c0_compute_throttle_setting_impl.addConstraint($in(joinRef(join($this(), c0_interface)), global(c0_compute_throttle_setting)));
c0_compute_throttle_setting_impl.addConstraint(none(join($this(), c0_Iflows)));
c0_compute_throttle_setting_impl.addConstraint(none(join($this(), c0_Ifeatures)));
c0_compute_throttle_setting_impl.addConstraint(none(join($this(), c0_Iproperties)));
c0_compute_throttle_setting_impl.addConstraint(none(join($this(), c0_Iconnections)));
c0_compute_throttle_setting_impl.addConstraint(none(join($this(), c0_Isubcomponents)));
c0_compute_throttle_setting_impl.addConstraint(equal(joinRef(join($this(), c0_system_latency)), constant(0)));
c0_default_interface_cts.addConstraint(equal(joinRef(join(joinParent($this()), c0_interface)), $this()));
c0_compute_desired_speed.addConstraint($in(join($this(), c0_ok_to_run_compute_desired_speed), joinRef(join($this(), c0_cds_features))));
c0_compute_desired_speed.addConstraint($in(join($this(), c0_instantaneous_velocity_compute_desired_speed), joinRef(join($this(), c0_cds_features))));
c0_compute_desired_speed.addConstraint($in(join($this(), c0_desired_speed_compute_desired_speed), joinRef(join($this(), c0_cds_features))));
c0_compute_desired_speed.addConstraint(equal(card(join($this(), c0_cds_features)), constant(3)));
c0_compute_desired_speed.addConstraint(implies(some(join($this(), c0_default_cds_features)), equal(joinRef(join($this(), c0_Cfeatures)), joinRef(join($this(), c0_cds_features)))));
c0_compute_desired_speed.addConstraint(equal(joinRef(join($this(), c0_cds_flows)), joinRef(join($this(), c0_compute_desired_speed_flow))));
c0_compute_desired_speed.addConstraint(implies(some(join($this(), c0_default_cds_flows)), equal(joinRef(join($this(), c0_Cflows)), joinRef(join($this(), c0_cds_flows)))));
c0_compute_desired_speed.addConstraint(none(join($this(), c0_Cproperties)));
c0_ok_to_run_compute_desired_speed.addConstraint(equal(joinRef(join($this(), c0_Pdirection)), global(c0_In)));
c0_ok_to_run_compute_desired_speed.addConstraint(none(join($this(), c0_Ptype)));
c0_ok_to_run_compute_desired_speed.addConstraint(none(join($this(), c0_Fproperties)));
c0_desired_speed_compute_desired_speed.addConstraint(equal(joinRef(join($this(), c0_Pdirection)), global(c0_Out)));
c0_desired_speed_compute_desired_speed.addConstraint(none(join($this(), c0_Ptype)));
c0_desired_speed_compute_desired_speed.addConstraint(none(join($this(), c0_Fproperties)));
c0_instantaneous_velocity_compute_desired_speed.addConstraint(equal(joinRef(join($this(), c0_Pdirection)), global(c0_In)));
c0_instantaneous_velocity_compute_desired_speed.addConstraint(none(join($this(), c0_Ptype)));
c0_instantaneous_velocity_compute_desired_speed.addConstraint(none(join($this(), c0_Fproperties)));
c0_default_compute_desired_speed_flow.addConstraint(equal(joinRef(join(joinParent($this()), c0_compute_desired_speed_flow)), $this()));
c0_default_compute_desired_speed_flow.addConstraint(equal(joinRef(join($this(), c0_flowType)), global(c0_Path)));
c0_default_compute_desired_speed_flow.addConstraint(equal(joinRef(join($this(), c0_latency)), join($this(), c0_compute_desired_speed_flow_lat)));
c0_default_compute_desired_speed_flow.addConstraint(equal(joinRef(join($this(), c0_flowElements)), union(join($this(), c0_compute_desired_speed_flow_fel1), join($this(), c0_compute_desired_speed_flow_fel2))));
c0_compute_desired_speed_flow_fel1.addConstraint(some(join(join($this(), c0_type), c0_FET_DataPort)));
c0_compute_desired_speed_flow_fel1.addConstraint(equal(joinRef(join($this(), c0_member)), join(joinParent(joinParent($this())), c0_instantaneous_velocity_compute_desired_speed)));
c0_compute_desired_speed_flow_fel2.addConstraint(some(join(join($this(), c0_type), c0_FET_DataPort)));
c0_compute_desired_speed_flow_fel2.addConstraint(equal(joinRef(join($this(), c0_member)), join(joinParent(joinParent($this())), c0_desired_speed_compute_desired_speed)));
c0_compute_desired_speed_flow_lat.addConstraint(equal(joinRef(join($this(), c0_value)), constant(4)));
c0_compute_desired_speed_flow_lat.addConstraint(equal(joinRef(join($this(), c0_unit)), global(c0_Ms)));
c0_compute_desired_speed_impl.addConstraint($in(joinRef(join($this(), c0_interface)), global(c0_compute_desired_speed)));
c0_compute_desired_speed_impl.addConstraint(none(join($this(), c0_Iflows)));
c0_compute_desired_speed_impl.addConstraint(none(join($this(), c0_Ifeatures)));
c0_compute_desired_speed_impl.addConstraint(none(join($this(), c0_Iproperties)));
c0_compute_desired_speed_impl.addConstraint(none(join($this(), c0_Iconnections)));
c0_compute_desired_speed_impl.addConstraint(none(join($this(), c0_Isubcomponents)));
c0_compute_desired_speed_impl.addConstraint(equal(joinRef(join($this(), c0_system_latency)), constant(0)));
c0_default_interface_cds.addConstraint(equal(joinRef(join(joinParent($this()), c0_interface)), $this()));
c0_default_interface_cds.addConstraint(some(join($this(), c0_default_cds_features)));
c0_default_interface_cds.addConstraint(some(join($this(), c0_default_cds_flows)));
c0_ccmain.addConstraint(equal(joinRef(join($this(), c0_Cfeatures)), union(union(union(join($this(), c0_cc_system_on_off_ccmain), join($this(), c0_brake_status_ccmain)), join($this(), c0_engine_status_ccmain)), join($this(), c0_ok_to_run_ccmain))));
c0_ccmain.addConstraint(equal(joinRef(join($this(), c0_Cflows)), join($this(), c0_ccmain_flow)));
c0_ccmain.addConstraint(none(join($this(), c0_Cproperties)));
c0_cc_system_on_off_ccmain.addConstraint(equal(joinRef(join($this(), c0_Pdirection)), global(c0_In)));
c0_cc_system_on_off_ccmain.addConstraint(none(join($this(), c0_Ptype)));
c0_cc_system_on_off_ccmain.addConstraint(none(join($this(), c0_Fproperties)));
c0_brake_status_ccmain.addConstraint(equal(joinRef(join($this(), c0_Pdirection)), global(c0_In)));
c0_brake_status_ccmain.addConstraint(equal(joinRef(join($this(), c0_Ptype)), global(c0_BOOL)));
c0_brake_status_ccmain.addConstraint(none(join($this(), c0_Fproperties)));
c0_engine_status_ccmain.addConstraint(equal(joinRef(join($this(), c0_Pdirection)), global(c0_In)));
c0_engine_status_ccmain.addConstraint(none(join($this(), c0_Ptype)));
c0_engine_status_ccmain.addConstraint(none(join($this(), c0_Fproperties)));
c0_ok_to_run_ccmain.addConstraint(equal(joinRef(join($this(), c0_Pdirection)), global(c0_Out)));
c0_ok_to_run_ccmain.addConstraint(none(join($this(), c0_Ptype)));
c0_ok_to_run_ccmain.addConstraint(none(join($this(), c0_Fproperties)));
c0_ccmain_flow.addConstraint(equal(joinRef(join($this(), c0_flowType)), global(c0_Path)));
c0_ccmain_flow.addConstraint(equal(joinRef(join($this(), c0_latency)), join($this(), c0_ccmain_flow_lat)));
c0_ccmain_flow.addConstraint(equal(joinRef(join($this(), c0_flowElements)), union(join($this(), c0_ccmain_flow_fel1), join($this(), c0_ccmain_flow_fel2))));
c0_ccmain_flow_fel1.addConstraint(some(join(join($this(), c0_type), c0_FET_DataPort)));
c0_ccmain_flow_fel1.addConstraint(equal(joinRef(join($this(), c0_member)), join(joinParent(joinParent($this())), c0_brake_status_ccmain)));
c0_ccmain_flow_fel2.addConstraint(some(join(join($this(), c0_type), c0_FET_DataPort)));
c0_ccmain_flow_fel2.addConstraint(equal(joinRef(join($this(), c0_member)), join(joinParent(joinParent($this())), c0_ok_to_run_ccmain)));
c0_ccmain_flow_lat.addConstraint(equal(joinRef(join($this(), c0_value)), constant(3)));
c0_ccmain_flow_lat.addConstraint(equal(joinRef(join($this(), c0_unit)), global(c0_Ms)));
c0_ccmain_impl.addConstraint($in(joinRef(join($this(), c0_interface)), global(c0_ccmain)));
c0_ccmain_impl.addConstraint(none(join($this(), c0_Iflows)));
c0_ccmain_impl.addConstraint(none(join($this(), c0_Ifeatures)));
c0_ccmain_impl.addConstraint(none(join($this(), c0_Iproperties)));
c0_ccmain_impl.addConstraint(none(join($this(), c0_Iconnections)));
c0_ccmain_impl.addConstraint(none(join($this(), c0_Isubcomponents)));
c0_ccmain_impl.addConstraint(equal(joinRef(join($this(), c0_system_latency)), constant(0)));
c0_default_interface_ccmain.addConstraint(equal(joinRef(join(joinParent($this()), c0_interface)), $this()));
c0_cruise_control.addConstraint(equal(joinRef(join($this(), c0_cc_features)), union(union(union(union(join($this(), c0_cc_system_on_off), join($this(), c0_engine_status)), join($this(), c0_brake_status)), join($this(), c0_wheel_pulse)), join($this(), c0_throttle_setting))));
c0_cruise_control.addConstraint(implies(some(join($this(), c0_default_cc_features)), equal(joinRef(join($this(), c0_Cfeatures)), joinRef(join($this(), c0_cc_features)))));
c0_cruise_control.addConstraint(equal(joinRef(join($this(), c0_Cflows)), join($this(), c0_cruise_control_flow)));
c0_cruise_control.addConstraint(none(join($this(), c0_Cproperties)));
c0_cc_system_on_off.addConstraint(equal(joinRef(join($this(), c0_Pdirection)), global(c0_In)));
c0_cc_system_on_off.addConstraint(none(join($this(), c0_Ptype)));
c0_cc_system_on_off.addConstraint(none(join($this(), c0_Fproperties)));
c0_brake_status.addConstraint(equal(joinRef(join($this(), c0_Pdirection)), global(c0_In)));
c0_brake_status.addConstraint(equal(joinRef(join($this(), c0_Ptype)), global(c0_BOOL)));
c0_brake_status.addConstraint(none(join($this(), c0_Fproperties)));
c0_engine_status.addConstraint(equal(joinRef(join($this(), c0_Pdirection)), global(c0_In)));
c0_engine_status.addConstraint(none(join($this(), c0_Ptype)));
c0_engine_status.addConstraint(none(join($this(), c0_Fproperties)));
c0_throttle_setting.addConstraint(equal(joinRef(join($this(), c0_Pdirection)), global(c0_Out)));
c0_throttle_setting.addConstraint(none(join($this(), c0_Ptype)));
c0_throttle_setting.addConstraint(none(join($this(), c0_Fproperties)));
c0_wheel_pulse.addConstraint(equal(joinRef(join($this(), c0_Pdirection)), global(c0_In)));
c0_wheel_pulse.addConstraint(none(join($this(), c0_Ptype)));
c0_wheel_pulse.addConstraint(none(join($this(), c0_Fproperties)));
c0_cruise_control_flow.addConstraint(equal(joinRef(join($this(), c0_flowType)), global(c0_Path)));
c0_cruise_control_flow.addConstraint(none(join($this(), c0_latency)));
c0_cruise_control_flow.addConstraint(equal(joinRef(join($this(), c0_flowElements)), union(join($this(), c0_cruise_control_flow_fel1), join($this(), c0_cruise_control_flow_fel2))));
c0_cruise_control_flow_fel1.addConstraint(some(join(join($this(), c0_type), c0_FET_DataPort)));
c0_cruise_control_flow_fel1.addConstraint(equal(joinRef(join($this(), c0_member)), join(joinParent(joinParent($this())), c0_brake_status)));
c0_cruise_control_flow_fel2.addConstraint(some(join(join($this(), c0_type), c0_FET_DataPort)));
c0_cruise_control_flow_fel2.addConstraint(equal(joinRef(join($this(), c0_member)), join(joinParent(joinParent($this())), c0_throttle_setting)));
c0_cruise_control_impl.addConstraint($in(joinRef(join($this(), c0_interface)), global(c0_cruise_control)));
c0_cruise_control_impl.addConstraint($in(joinRef(join($this(), c0_CC_M)), joinRef(join($this(), c0_ccsubcomponents))));
c0_cruise_control_impl.addConstraint($in(joinRef(join($this(), c0_C_V)), joinRef(join($this(), c0_ccsubcomponents))));
c0_cruise_control_impl.addConstraint($in(joinRef(join($this(), c0_C_D_S)), joinRef(join($this(), c0_ccsubcomponents))));
c0_cruise_control_impl.addConstraint($in(joinRef(join($this(), c0_C_T_S)), joinRef(join($this(), c0_ccsubcomponents))));
c0_cruise_control_impl.addConstraint(equal(card(join($this(), c0_ccsubcomponents)), constant(4)));
c0_cruise_control_impl.addConstraint(implies(some(join($this(), c0_default_cc_subcomponents)), equal(joinRef(join($this(), c0_Isubcomponents)), joinRef(join($this(), c0_ccsubcomponents)))));
c0_cruise_control_impl.addConstraint(equal(joinRef(join($this(), c0_typecasted_interface)), joinRef(join($this(), c0_interface))));
c0_cruise_control_impl.addConstraint(equal(joinRef(join($this(), c0_typecasted_CC_M_interface)), joinRef(join(joinRef(join($this(), c0_CC_M)), c0_interface))));
c0_cruise_control_impl.addConstraint(equal(joinRef(join($this(), c0_typecasted_C_V_interface)), joinRef(join(joinRef(join($this(), c0_C_V)), c0_interface))));
c0_cruise_control_impl.addConstraint(equal(joinRef(join($this(), c0_typecasted_C_D_S_interface)), joinRef(join(joinRef(join($this(), c0_C_D_S)), c0_interface))));
c0_cruise_control_impl.addConstraint(equal(joinRef(join($this(), c0_typecasted_C_T_S_interface)), joinRef(join(joinRef(join($this(), c0_C_T_S)), c0_interface))));
c0_cruise_control_impl.addConstraint(equal(joinRef(join($this(), c0_cc_connections)), union(union(union(union(union(union(union(join($this(), c0_cruise_control_impl_C1), join($this(), c0_cruise_control_impl_C2)), join($this(), c0_cruise_control_impl_C3)), join($this(), c0_cruise_control_impl_C4)), join($this(), c0_cruise_control_impl_C5)), join($this(), c0_cruise_control_impl_C6)), join($this(), c0_cruise_control_impl_C7)), join($this(), c0_cruise_control_impl_C8))));
c0_cruise_control_impl.addConstraint(implies(some(join($this(), c0_default_cc_connections)), equal(joinRef(join($this(), c0_Iconnections)), joinRef(join($this(), c0_cc_connections)))));
c0_cruise_control_impl.addConstraint(equal(joinRef(join($this(), c0_Iflows)), join($this(), c0_cruise_control_impl_flow)));
c0_cruise_control_impl.addConstraint(none(join($this(), c0_Ifeatures)));
c0_cruise_control_impl.addConstraint(none(join($this(), c0_Iproperties)));
c0_default_interface_cc.addConstraint(equal(joinRef(join(joinParent($this()), c0_interface)), $this()));
c0_CC_M.addConstraint($in(joinRef(join(joinRef($this()), c0_interface)), global(c0_ccmain)));
c0_C_V.addConstraint($in(joinRef(join(joinRef($this()), c0_interface)), global(c0_compute_velocity)));
c0_C_D_S.addConstraint($in(joinRef(join(joinRef($this()), c0_interface)), global(c0_compute_desired_speed)));
c0_C_T_S.addConstraint($in(joinRef(join(joinRef($this()), c0_interface)), global(c0_compute_throttle_setting)));
c0_default_CC_M.addConstraint(equal(joinRef(join(joinParent($this()), c0_CC_M)), $this()));
c0_default_CC_M_Int.addConstraint(equal(joinRef(join(joinRef(join(joinParent(joinParent($this())), c0_CC_M)), c0_interface)), $this()));
c0_default_C_V.addConstraint(equal(joinRef(join(joinParent($this()), c0_C_V)), $this()));
c0_default_C_V_Int.addConstraint(equal(joinRef(join(joinRef(join(joinParent(joinParent($this())), c0_C_V)), c0_interface)), $this()));
c0_default_C_D_S.addConstraint(equal(joinRef(join(joinParent($this()), c0_C_D_S)), $this()));
c0_default_C_D_S.addConstraint(some(join($this(), c0_default_interface_cds)));
c0_default_C_T_S.addConstraint(equal(joinRef(join(joinParent($this()), c0_C_T_S)), $this()));
c0_default_C_T_S_Int.addConstraint(equal(joinRef(join(joinRef(join(joinParent(joinParent($this())), c0_C_T_S)), c0_interface)), $this()));
c0_cruise_control_impl_C1.addConstraint(equal(joinRef(join($this(), c0_start)), join(joinRef(join(joinParent($this()), c0_typecasted_interface)), c0_cc_system_on_off)));
c0_cruise_control_impl_C1.addConstraint(equal(joinRef(join($this(), c0_end)), join(joinRef(join(joinParent($this()), c0_typecasted_CC_M_interface)), c0_cc_system_on_off_ccmain)));
c0_cruise_control_impl_C2.addConstraint(equal(joinRef(join($this(), c0_start)), join(joinRef(join(joinParent($this()), c0_typecasted_interface)), c0_brake_status)));
c0_cruise_control_impl_C2.addConstraint(equal(joinRef(join($this(), c0_end)), join(joinRef(join(joinParent($this()), c0_typecasted_CC_M_interface)), c0_brake_status_ccmain)));
c0_cruise_control_impl_C3.addConstraint(equal(joinRef(join($this(), c0_start)), join(joinRef(join(joinParent($this()), c0_typecasted_interface)), c0_engine_status)));
c0_cruise_control_impl_C3.addConstraint(equal(joinRef(join($this(), c0_end)), join(joinRef(join(joinParent($this()), c0_typecasted_CC_M_interface)), c0_engine_status_ccmain)));
c0_cruise_control_impl_C4.addConstraint(equal(joinRef(join($this(), c0_start)), join(joinRef(join(joinParent($this()), c0_typecasted_interface)), c0_wheel_pulse)));
c0_cruise_control_impl_C4.addConstraint(equal(joinRef(join($this(), c0_end)), join(joinRef(join(joinParent($this()), c0_typecasted_C_V_interface)), c0_wheel_pulse_compute_velocity)));
c0_cruise_control_impl_C5.addConstraint(equal(joinRef(join($this(), c0_start)), join(joinRef(join(joinParent($this()), c0_typecasted_CC_M_interface)), c0_ok_to_run_ccmain)));
c0_cruise_control_impl_C5.addConstraint(equal(joinRef(join($this(), c0_end)), join(joinRef(join(joinParent($this()), c0_typecasted_C_D_S_interface)), c0_ok_to_run_compute_desired_speed)));
c0_cruise_control_impl_C6.addConstraint(equal(joinRef(join($this(), c0_start)), join(joinRef(join(joinParent($this()), c0_typecasted_C_V_interface)), c0_instantaneous_velocity_compute_velocity)));
c0_cruise_control_impl_C6.addConstraint(equal(joinRef(join($this(), c0_end)), join(joinRef(join(joinParent($this()), c0_typecasted_C_D_S_interface)), c0_instantaneous_velocity_compute_desired_speed)));
c0_cruise_control_impl_C7.addConstraint(equal(joinRef(join($this(), c0_start)), join(joinRef(join(joinParent($this()), c0_typecasted_C_D_S_interface)), c0_desired_speed_compute_desired_speed)));
c0_cruise_control_impl_C7.addConstraint(equal(joinRef(join($this(), c0_end)), join(joinRef(join(joinParent($this()), c0_typecasted_C_T_S_interface)), c0_desired_speed_compute_throttle_setting)));
c0_cruise_control_impl_C8.addConstraint(equal(joinRef(join($this(), c0_start)), join(joinRef(join(joinParent($this()), c0_typecasted_C_T_S_interface)), c0_throttle_setting_compute_throttle_setting)));
c0_cruise_control_impl_C8.addConstraint(equal(joinRef(join($this(), c0_end)), join(joinRef(join(joinParent($this()), c0_typecasted_interface)), c0_throttle_setting)));
c0_cruise_control_impl_flow.addConstraint(equal(joinRef(join($this(), c0_flowType)), global(c0_Path)));
c0_cruise_control_impl_flow.addConstraint(none(join($this(), c0_latency)));
c0_cruise_control_impl_flow.addConstraint(equal(joinRef(join($this(), c0_flowElements)), union(union(union(union(union(union(union(union(join($this(), c0_cruise_control_impl_flow_fel1), join($this(), c0_cruise_control_impl_flow_fel2)), join($this(), c0_cruise_control_impl_flow_fel3)), join($this(), c0_cruise_control_impl_flow_fel4)), join($this(), c0_cruise_control_impl_flow_fel5)), join($this(), c0_cruise_control_impl_flow_fel6)), join($this(), c0_cruise_control_impl_flow_fel7)), join($this(), c0_cruise_control_impl_flow_fel8)), join($this(), c0_cruise_control_impl_flow_fel9))));
c0_cruise_control_impl_flow_fel1.addConstraint(some(join(join($this(), c0_type), c0_FET_DataPort)));
c0_cruise_control_impl_flow_fel1.addConstraint(equal(joinRef(join($this(), c0_member)), join(joinRef(join(joinParent(joinParent($this())), c0_typecasted_interface)), c0_brake_status)));
c0_cruise_control_impl_flow_fel2.addConstraint(some(join(join($this(), c0_type), c0_FET_Connection)));
c0_cruise_control_impl_flow_fel2.addConstraint(equal(joinRef(join($this(), c0_member)), join(joinParent(joinParent($this())), c0_cruise_control_impl_C2)));
c0_cruise_control_impl_flow_fel3.addConstraint(some(join(join($this(), c0_type), c0_FET_Flow)));
c0_cruise_control_impl_flow_fel3.addConstraint(equal(joinRef(join($this(), c0_member)), join(joinRef(join(joinParent(joinParent($this())), c0_typecasted_CC_M_interface)), c0_ccmain_flow)));
c0_cruise_control_impl_flow_fel4.addConstraint(some(join(join($this(), c0_type), c0_FET_Connection)));
c0_cruise_control_impl_flow_fel4.addConstraint(equal(joinRef(join($this(), c0_member)), join(joinParent(joinParent($this())), c0_cruise_control_impl_C5)));
c0_cruise_control_impl_flow_fel5.addConstraint(some(join(join($this(), c0_type), c0_FET_Flow)));
c0_cruise_control_impl_flow_fel5.addConstraint(equal(joinRef(join($this(), c0_member)), joinRef(join(joinRef(join(joinParent(joinParent($this())), c0_typecasted_C_D_S_interface)), c0_compute_desired_speed_flow))));
c0_cruise_control_impl_flow_fel6.addConstraint(some(join(join($this(), c0_type), c0_FET_Connection)));
c0_cruise_control_impl_flow_fel6.addConstraint(equal(joinRef(join($this(), c0_member)), join(joinParent(joinParent($this())), c0_cruise_control_impl_C7)));
c0_cruise_control_impl_flow_fel7.addConstraint(some(join(join($this(), c0_type), c0_FET_Flow)));
c0_cruise_control_impl_flow_fel7.addConstraint(equal(joinRef(join($this(), c0_member)), join(joinRef(join(joinParent(joinParent($this())), c0_typecasted_C_T_S_interface)), c0_compute_throttle_setting_flow)));
c0_cruise_control_impl_flow_fel8.addConstraint(some(join(join($this(), c0_type), c0_FET_Connection)));
c0_cruise_control_impl_flow_fel8.addConstraint(equal(joinRef(join($this(), c0_member)), join(joinParent(joinParent($this())), c0_cruise_control_impl_C8)));
c0_cruise_control_impl_flow_fel9.addConstraint(some(join(join($this(), c0_type), c0_FET_DataPort)));
c0_cruise_control_impl_flow_fel9.addConstraint(equal(joinRef(join($this(), c0_member)), join(joinRef(join(joinParent(joinParent($this())), c0_typecasted_interface)), c0_throttle_setting)));
c0_compute_desired_speed_acc.addConstraint($in(join($this(), c0_lead_value_compute_desired_speed_acc), joinRef(join($this(), c0_cds_acc_features))));
c0_compute_desired_speed_acc.addConstraint(equal(card(join($this(), c0_cds_acc_features)), constant(1)));
c0_compute_desired_speed_acc.addConstraint(equal(joinRef(join($this(), c0_Cfeatures)), union(joinRef(join($this(), c0_cds_acc_features)), joinRef(join($this(), c0_cds_features)))));
c0_compute_desired_speed_acc.addConstraint(none(join($this(), c0_default_compute_desired_speed_flow)));
c0_compute_desired_speed_acc.addConstraint(some(join($this(), c0_default_cds_flows)));
c0_compute_desired_speed_acc.addConstraint(none(join($this(), c0_Cproperties)));
c0_lead_value_compute_desired_speed_acc.addConstraint(equal(joinRef(join($this(), c0_Pdirection)), global(c0_In)));
c0_lead_value_compute_desired_speed_acc.addConstraint(equal(joinRef(join($this(), c0_Ptype)), global(c0_FLOAT)));
c0_lead_value_compute_desired_speed_acc.addConstraint(none(join($this(), c0_Fproperties)));
c0_default_compute_desired_speed_flow_acc.addConstraint(equal(joinRef(join(joinParent($this()), c0_compute_desired_speed_flow)), $this()));
c0_default_compute_desired_speed_flow_acc.addConstraint(equal(joinRef(join($this(), c0_flowType)), global(c0_Path)));
c0_default_compute_desired_speed_flow_acc.addConstraint(equal(joinRef(join($this(), c0_latency)), join($this(), c0_lat)));
c0_default_compute_desired_speed_flow_acc.addConstraint(equal(joinRef(join($this(), c0_flowElements)), union(join($this(), c0_fel1), join($this(), c0_fel2))));
c0_fel1.addConstraint(some(join(join($this(), c0_type), c0_FET_DataPort)));
c0_fel1.addConstraint(equal(joinRef(join($this(), c0_member)), join(joinParent(joinParent($this())), c0_instantaneous_velocity_compute_desired_speed)));
c0_fel2.addConstraint(some(join(join($this(), c0_type), c0_FET_DataPort)));
c0_fel2.addConstraint(equal(joinRef(join($this(), c0_member)), join(joinParent(joinParent($this())), c0_desired_speed_compute_desired_speed)));
c0_lat.addConstraint(equal(joinRef(join($this(), c0_value)), constant(3)));
c0_lat.addConstraint(equal(joinRef(join($this(), c0_unit)), global(c0_Ms)));
c0_compute_desired_speed_acc_impl.addConstraint($in(joinRef(join($this(), c0_interface)), global(c0_compute_desired_speed_acc)));
c0_default_interface_cds_acc.addConstraint(equal(joinRef(join(joinParent($this()), c0_interface)), $this()));
c0_default_interface_cds_acc.addConstraint(none(join(joinParent($this()), c0_Iflows)));
c0_default_interface_cds_acc.addConstraint(none(join(joinParent($this()), c0_Ifeatures)));
c0_default_interface_cds_acc.addConstraint(none(join(joinParent($this()), c0_Iproperties)));
c0_default_interface_cds_acc.addConstraint(none(join(joinParent($this()), c0_Iconnections)));
c0_default_interface_cds_acc.addConstraint(none(join(joinParent($this()), c0_Isubcomponents)));
c0_adaptive_cruise_control.addConstraint($in(join($this(), c0_lead_value_adaptive_cruise_control), joinRef(join($this(), c0_acc_features))));
c0_adaptive_cruise_control.addConstraint(equal(card(join($this(), c0_acc_features)), constant(1)));
c0_adaptive_cruise_control.addConstraint(none(join($this(), c0_default_cc_features)));
c0_adaptive_cruise_control.addConstraint(equal(joinRef(join($this(), c0_Cfeatures)), union(joinRef(join($this(), c0_cc_features)), joinRef(join($this(), c0_acc_features)))));
c0_lead_value_adaptive_cruise_control.addConstraint(equal(joinRef(join($this(), c0_Pdirection)), global(c0_In)));
c0_lead_value_adaptive_cruise_control.addConstraint(none(join($this(), c0_Ptype)));
c0_lead_value_adaptive_cruise_control.addConstraint(none(join($this(), c0_Fproperties)));
c0_adaptive_cruise_control_impl.addConstraint($in(joinRef(join($this(), c0_interface)), global(c0_adaptive_cruise_control)));
c0_adaptive_cruise_control_impl.addConstraint($in(joinRef(join($this(), c0_C_D_S)), global(c0_compute_desired_speed_acc_impl)));
c0_adaptive_cruise_control_impl.addConstraint(equal(joinRef(join($this(), c0_typecasted_acc_interface)), joinRef(join($this(), c0_interface))));
c0_adaptive_cruise_control_impl.addConstraint(equal(joinRef(join($this(), c0_typecasted_C_D_S_acc_interface)), joinRef(join(joinRef(join($this(), c0_C_D_S)), c0_interface))));
c0_adaptive_cruise_control_impl.addConstraint($in(join($this(), c0_C9), joinRef(join($this(), c0_acc_connections))));
c0_adaptive_cruise_control_impl.addConstraint(equal(card(join($this(), c0_acc_connections)), constant(1)));
c0_adaptive_cruise_control_impl.addConstraint(none(join($this(), c0_default_cc_connections)));
c0_adaptive_cruise_control_impl.addConstraint(equal(joinRef(join($this(), c0_Iconnections)), union(joinRef(join($this(), c0_cc_connections)), joinRef(join($this(), c0_acc_connections)))));
c0_default_interface_acc.addConstraint(equal(joinRef(join(joinParent($this()), c0_interface)), $this()));
c0_default_C_D_S_acc.addConstraint(equal(joinRef(join(joinParent($this()), c0_C_D_S)), $this()));
c0_default_C_D_S_acc.addConstraint(none(join(joinParent($this()), c0_default_C_D_S)));
c0_default_C_D_S_acc_Int.addConstraint(equal(joinRef(join(joinRef(join(joinParent(joinParent($this())), c0_C_D_S)), c0_interface)), $this()));
c0_C9.addConstraint(equal(joinRef(join($this(), c0_start)), join(joinRef(join(joinParent($this()), c0_typecasted_acc_interface)), c0_lead_value_adaptive_cruise_control)));
c0_C9.addConstraint(equal(joinRef(join($this(), c0_end)), join(joinRef(join(joinParent($this()), c0_typecasted_C_D_S_acc_interface)), c0_lead_value_compute_desired_speed_acc)));
c0_INTERFACE_CC.addConstraint(some(join($this(), c0_default_cc_features)));
c0_IMPLEMENTATION_CC.addConstraint(equal(joinRef(join($this(), c0_interface)), global(c0_INTERFACE_CC)));
c0_IMPLEMENTATION_CC.addConstraint(none(join($this(), c0_default_interface_cc)));
c0_IMPLEMENTATION_CC.addConstraint(some(join($this(), c0_default_CC_M)));
c0_IMPLEMENTATION_CC.addConstraint(some(join($this(), c0_default_C_V)));
c0_IMPLEMENTATION_CC.addConstraint(some(join($this(), c0_default_C_D_S)));
c0_IMPLEMENTATION_CC.addConstraint(some(join($this(), c0_default_C_T_S)));
c0_IMPLEMENTATION_CC.addConstraint(some(join($this(), c0_default_cc_subcomponents)));
c0_IMPLEMENTATION_CC.addConstraint(some(join($this(), c0_default_cc_connections)));
c0_IMPLEMENTATION_ACC.addConstraint(equal(joinRef(join($this(), c0_interface)), global(c0_INTERFACE_ACC)));
c0_IMPLEMENTATION_ACC.addConstraint(none(join($this(), c0_default_interface_acc)));
c0_IMPLEMENTATION_ACC.addConstraint(none(join($this(), c0_default_interface_cc)));
c0_IMPLEMENTATION_ACC.addConstraint(some(join($this(), c0_default_CC_M)));
c0_IMPLEMENTATION_ACC.addConstraint(some(join($this(), c0_default_C_V)));
c0_IMPLEMENTATION_ACC.addConstraint(some(join($this(), c0_default_C_D_S_acc)));
c0_IMPLEMENTATION_ACC.addConstraint(some(join($this(), c0_default_C_T_S)));
c0_IMPLEMENTATION_ACC.addConstraint(some(join($this(), c0_default_cc_subcomponents)));
c0_Car.addConstraint(equal(joinRef(join($this(), c0_total_latency)), sum(join(global(c0_SystemImpl), c0_system_latency))));
c0_cc.addConstraint(equal(joinRef(join($this(), c0_system_latency)), constant(10)));
c0_acc.addConstraint(equal(joinRef(join($this(), c0_system_latency)), constant(15)));
min(joinRef(join(global(c0_MyCar), c0_total_latency)));
